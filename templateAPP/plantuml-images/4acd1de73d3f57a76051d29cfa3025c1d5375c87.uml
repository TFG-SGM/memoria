@startuml

skinparam class {
    BorderColor black
}
skinparam ArrowColor black

Views ..> DataService
Views ..> TestService

DataService ..> AuthRouter
DataService ..> AdminRouter
DataService ..> DoctorRouter
DataService ..> PatientRouter
DataService ..> TestRouter
DataService ..> TestTypeRouter
DataService ..> FileRouter

AuthRouter ..> AuthController
AdminRouter ..> AdminController
DoctorRouter ..> DoctorController
PatientRouter ..> PatientController
TestRouter ..> TestController
TestTypeRouter ..> TestTypeController
FileRouter ..> FileController

AdminController ..> AdminModel
DoctorController ..> DoctorModel
PatientController ..> PatientModel
TestController ..> TestModel
TestTypeController ..> TestTypeModel

class Views #Plum {}

class TestService #LightGreen {
    +number[] getRealMovements(parts: TestPartsData, axis: axisData, actualPart: string)
    +number[] getIdealMovements(parts: TestPartsData, axis: axisData, actualPart: string)
    +string[] getBodyParts(parts: TestPartsData)
    +object getBodyPartsForRadial(parts: TestPartsData)
    +number[] getBodyPartRestriction(parts: TestPartsData)
    +number[] getUniqueVariations(parts: TestPartsData, axis: axisData, actualPart: string)
    +number[] getVariationsCount(parts: TestPartsData, axis: axisData, actualPart: string, uniqueVariations: number[])
    +number[] getBoxPlotData(movements: number[])
    +any[][] getCorrelatedVariations(parts: TestPartsData, axis: axisData, parts1: string, parts2: string)
    +object getProcessDataForBarChart(data: TestSubData)
    +object getProcessDataForChartEvolution(tests: TestData[])
    -number findQuartile(sortedData: number[], quartile: number)
}

class DataService #LightGreen {
    +string getToken()
    +data login(email: string, password: string)
    +void logout()
    +data getData(endpoint: string)
    +data createData(endpoint: string, newData: T) 
    +data createFormData(endpoint: string, newData: T) 
    +data deleteData(endpoint: string) 
    +data updateData(endpoint: string, newData: T) 
    +data updateFormData(endpoint: string, newData: T) 
    +data getUserData() 
    -FormData getFormDataFromObject(data: T) 
}

class AuthRouter #LightSteelBlue {
    void get("/auth/login")
    void post("/auth/user-data")
}

class AdminRouter #LightSteelBlue {
    void get("/admin/")
    void post("/admin/")
    void get("/admin/:id")
    void put("/admin/:id")
    void put("/admin/password/:id")
    void delete("/admin/:id")
}

class DoctorRouter #LightSteelBlue {
    void get("/doctor/")
    void post("/doctor/")
    void get("/doctor/:id")
    void put("/doctor/:id")
    void put("/doctor/password/:id")
    void delete("/doctor/:id")
}

class PatientRouter #LightSteelBlue {
    void get("/patient/")
    void post("/patient/")
    void get("/patient/:id")
    void put("/patient/:id")
    void delete("/patient/:id")
}

class TestRouter #LightSteelBlue {
    void get("/test/")
    void post("/test/")
    void get("/test/:id")
    void put("/test/:id")
    void delete("/test/:id")
    void delete("/test/patient/:patientId")
    void get("/test/attribute")
}

class TestTypeRouter #LightSteelBlue {
    void get("/testType/")
    void get("/testType/:id")
}

class FileRouter #LightSteelBlue {
    void get("/file/:id")
    void delete("/file/:id")
}

class AuthController #PaleGoldenRod {
    void validateEmail(email: string)
    void hasPassword(password: string)
    void getUserData(req: Request, res: Response)
    void login(req: Request, res: Response)
}

class AdminController #PaleGoldenRod {
    void getAll(req: Request, res: Response)
    void getById(req: Request, res: Response)
    void create(req: Request, res: Response)
    void update(req: Request, res: Response)
    void updatePass(req: Request, res: Response)
    void delete(req: Request, res: Response)
}

class DoctorController #PaleGoldenRod {
    void getAll(req: Request, res: Response)
    void getById(req: Request, res: Response)
    void create(req: Request, res: Response)
    void update(req: Request, res: Response)
    void updatePass(req: Request, res: Response)
    void delete(req: Request, res: Response)
}

class PatientController #PaleGoldenRod {
    void getAll(req: Request, res: Response)
    void getById(req: Request, res: Response)
    void create(req: Request, res: Response)
    void update(req: Request, res: Response)
    void delete(req: Request, res: Response)
}

class TestController #PaleGoldenRod {
    void getAll(req: Request, res: Response)
    void getById(req: Request, res: Response)
    void create(req: Request, res: Response)
    void update(req: Request, res: Response)
    void delete(req: Request, res: Response)
    void deleteByPatient(req: Request, res: Response)
    void getAttributes(req: Request, res: Response)
}

class TestTypeController #PaleGoldenRod {
    void getAll(req: Request, res: Response)
    void getById(req: Request, res: Response)
}

class FileController #PaleGoldenRod {
    void getById(req: Request, res: Response)
    void delete(req: Request, res: Response)
}

class AdminModel #Tan {
    admin[] getAll()
    admin getById({id: string})
    admin create({input: User})
    admin update({id: string, input: User})
    int delete({id: string})
}

class DoctorModel #Tan{
    doctor[] getAll()
    doctor getById({id: string})
    doctor create({input: User})
    doctor update({id: string , input: User})
    int delete({id})
}

class PatientModel #Tan{
    patient[] getAll()
    patient getById({id: string})
    patient create({input: Patient})
    patient update({id: string, input: Patient})
    int delete({id: string})
}

class TestModel #Tan {
    test[] getAll({patientId: string, doctorId: string, typeId: string, date: string, order: string})
    test getById({id: string})
    test create({id: string})
    tes update({id: string})
    int delete({id: string})
    string[] deleteByPatient({patientId: string})
    string[] getAttributes({attribute: string, patientId: string})
}

class TestTypeModel #Tan{
    testType[] getAll()
    testType getById({id: string})
}

@enduml